Day 1
~~~~~~

Java - BL
Design Patterns - BL
Spring Framework - BL
Spring Boot - BL
Microservices - BL/Testing
SQL - Back End
DevOps - CI/CD
Angular - Front End

Java - Programming language


Client --> FE --> Server (Application/Database) -->FE-->Client

0/1

Input
Store
Process
Output


Binary/Machine
Assembly - Pseudocodes -Assembler - Language Translator
High level - Compiler/Interpreter

GI/GO

10 lines 

get n1
get n2
Add n1 and n2
Store sum
display sum

C -- Compiler 

c program --> Compiler --> Binary --> Computer
.c --> Compiler --> .exe
High level --> Compiler --> Machine level
Windows 10 - 32 bit


Java - High level programming platform independent compiled and interpreted language
Compiler/Interpreter

Java program --> Compiler --> Interpreter --> Binary --> Computer

.java --> Compiler --> .class --> Interpreter --> .exe

Java file --> Bytes--> Bits

.java

Array - linear indexed homegeneous static data structure

Information-> Processed(0,1)-> Data --> Computer -->Data --> Process Data --> Information

JDK -Java Development Kit - Kit - Tools and libraries - Help in the execution of the Java files/program
JRE - Java Runtime Environment - package - JVM and their libraries
JVM - Java Virtual Machine - component

Java file

.java


OOPs - Object Oriented Programming 

Object - Instance of class
Class - Template
Abstraction
Encapsulation
Polymorphism
 Runtime (Dynamic), Compile time (Static)
Inheritance
 Single - 1p, 1c
 Multiple - np, 1c
 Multilevel - 1p, 1c in many levels
 Hybrid - Mother, Father --> Daughter -> 1Son, 1 Daughter
 Hierarchical - 1p, nc

C-->P1-->P2-->P3-->P4

class

Template - members - properties (fields) and methods (functions)

P4
{
P1
p2
m1
}

P3 is child of P4
{
p3
m2
}


C = PD
C + OOPs = C++ (PD)

OOPs+ PI = Java



void main()
{
}
a.c

Class and objects

class MyClass
{
//Members
properties
methods
//Single line comment

/* Multi
line
comment*/
}


class MyClass
{
//Method 1
public static void main(String args[])
{
System.out.println("Hello world!");
add();subtract();
}

MyClass.java --> compiler --> MyClass.class

MyClass.class --> Interpreter (JVM)-->.exe

MyClass.main()

javac Myclass.java//Bytes
java MyClass string1 string2 34 56 //Bits

Hello world!


//Method 2
void add(){
System.out.println("Addition!");
}

//Method 3
void sustract(){
System.out.println("Subtraction!");}

}//End of class

MyClass obj1 = new MyClass();
obj1.add();
obj1.subtract();

//new MyClass().add();
//new MyClass().subtract();


System.in// predefined methods for getting inputs
System.out // predefined methods for giving outputs


Function
Declaration - void add();
Definition void add(){//set of instructions}
Call - add();


int add(){}

int a = add();

Scope of the variables
 - Block
 - Method
 - Class

Data Types - int, long
 -To determine the amount to be allocated
 - int d;//4 bytes
 - predefined
 - userdefined
.java -> compiler -> .class
int n1, int n2 -> compiler -> .class

class MyClass -> Properties , Methods

int d ;

new MyClass(); = reference

class , object
instance, reference


MyClass m1;//m1 is instance
new MyClass() ;// reference
MyClass m1 = new MyClass();//m1 becomes object

instantiation
Initialization

MyClass m1;//Instantiation
MyClass m1 = new MyClass();//Initializtion


int d;//Declaration -- memory will be allocated, blocked with the name d , and with the dafault value 0
int d =9;-- memory will be allocated, blocked with the name d , and with the dafault value 0 and overridden by 9


class MyClass{}

int d;
MyClass m1;
Compiler will allocate memory for predefined data types only
Interpreter - JVM allocates memory for user defined data types 

MyClass m1 = new MyClass();

java -> bytes
Bytes -> bits


class MyClass
{
 int v1;//non static field
 static int v2;// static field
 void m1(){}// non static method
 static void m2(){}//static method
}

MyClass m1;
 
compilation is different

execution is different
~~~~~~~~~~~

compilation memory space is different

execution memory space is different

~~~~~~~~~~~~~~~~

Compiler allocates memory for static fields

Interpreter allocates memory for non-static fields


~~~~~~~~~~~~~~~


50 lines

1, 2, 3.... 50

control flow statements
 conditional statements - if, if else, else if ladder, nested if, switch (switch,case, break, default)
 Looping statements - for, while, do-while
  for - counter- controlled, entry-controlled
  while - sentinel-controlled, entry-controlled
  do -while - sentinel-controlled, exit-controlled

for(int i=2;i>=3;;i++){}
while(i!=0)

do{

}while(i!=0);


if()
 //Do this
else
 // Do this

~~~~~~~~~~~~~~~~~~~~~~~~~

instructions 
methods
class
package

java.lang
java.lang.Object 
object

Sum Up
~~~~~~~
Java
Front End
Back End
Business Logic
Database
Full Stack
OOPs concepts - Class, Object, Inheritance and its types, Abstraction, Encapsulation, Polymorphism and its types

Language
Programming language
JDK
JRE
JVM
Platform Independent - Compiler, Interpreter

Compilation
Execution

.java
.class
.exe

Data Types - Primitive, Non-primitive

Control flow statements
Conditional - if, if-else, nested-if, if-else ladder, switch
Looping - for, while, do-while
counter
sentinel
entry-controlled
exit-controlled

static
non-static

instance
reference
instantiation
initialization

Comments
//Single line comment 
/* Multi line 
comment*/


root package - java.lang
Object

_____________________________________________________
Day 2 - 29.05.2025
~~~~~~~~~~~~~~~~~~

OOPs concepts

Class
Object

class MyFirstClasss
class My_First_Class
class My_first_class

members
properties
methods

Polymorphism
 Runtime (Dynamic) - Method overriding
 Compile time (Static) - Method overloading

Inheritance
 Single - 1p, 1c
 Multiple - np, 1c//Interface
 Multilevel - 1p, 1c in many levels
 Hybrid - Mother, Father --> Daughter -> 1Son, 1 Daughter
 Hierarchical - 1p, nc


Inheritance 
 Superclass - parent class
 Subclass - Child class
 extends 

ClassName1 (child) extends ClassName2(Parent)
super

C1 extends P1


class Mother
{
void print()
{
Sop("Mother");
}
}

class Father
{
void print()
{
Sop("Father");
}
}

class Child extends Mother
void print()
{
super.print();
Sop("Child");
}
}


new Child().print();


constructor
 - method

methodName should be the same as the class name

class ABCDClass
{
 int a;//Memory will be created with 4 bytes and with the default value 0

 ABCDClass(){
SOP("");

 }//Default constructor

ABCDClass(int a)//Parametrized constructor
{
this.a=a;
}

static void method(){}

void method1(){}

}

class D extends ABCDClass
{
D(){}}



ABCDClass.method()
ABCDClass abcd1 = new ABCDClass(100);
ABCDClass abcd2 = new ABCDClass(1100);
ABCDClass abcd3 = new ABCDClass(10);



Types of constructors
 - Default //without parameters
 - Parametrized constructor //with parameters

method overloading
constructor overloading

abstract
 - keyword
 - go with method and class

Method 
 - Not have definition

Class
 - Not have reference

Inheritance

Sum Up
~~~~~~
OOPs

class
object
abstraction
encapsulation
polymorphism
 Overloading
 Overriding

Overloading
 Method name should be same
 Method signature should be different (No of parameters, Order of parameters, data types of parameters)
 Method overloading is possible within the same class
 Return type can't be considered as the method's signature


Overriding
 Method name should be same
 Method signature should also be the same
 Is possible only between parent class and child class
 super keyword could be used in the child class method to invoke the parent class's overridden method


Inheritance
 - extends 
 - extends doesn't support Multiple inheritance 
 - Single, Multilevel, Hierarchical, Hybrid
 - Class1(Child) extends Class2(Parent)

Constructor 
 - method
 - name as the same name as the class name
 - can be default or parametrized constructor
 - overloading is also possible

abstract
 - keyword
 - method or class
 - If with method, method will not have definition
 - If with class, class can not be referenced
 - Inheritance
 - Reference of child class can be asssigned to the instance of the super class

______________________________________________________
Day 3 - 02.06.2025
~~~~~~~~~~~~~~~~~~

Array

static linear indexed homogeneous data structure

store similar elements

index - start with 0 and go till n-1
 n - size of the array


Types of Array:
1. Single - int[]
2. Two - int[][]
3. Multi - int[][][]



int, long, double

int n1;
int[] myArray;//Declaration
int[] myArray = new int[5];//Declaration with memory

double[] myDoubleArray = new double[5];


class ABCD{
int id;
String name;
double salary;
}

ABCD ab = new ABCD();

ABCD[] abArray ;
abArray[0]=new ABCD(12,"ABCD",67898998);



11,32,13,94,56,98};


Matrix 
No of rows - 1
No of columns - 6

11 32 13 94 56 98


Two dimensional

Matrix 
No of rows > 1
No of columns >1


c[0]  c[1]  c[2]  - loop 2
23   45    56 - r[0] - loop 1
67   55    77 - r[1]
34   95    23

row - number of rows in the matrix
column - number of columns in the matrix

for(int r=0;r<row.length;r++)
{
   for(int c=0;c<column.length;c++)



23 45 67 - r0
34 57 89 - r1

~~~~~~~~~~~~~~~~~~~~
abstract class MDA
{
abstract void abcd();
}
}

abstract class MDS
{
void m1(){}
void m2(){}
}

~~~~~~~~~~~
final

field
method
class




9.15 am to 10.40 am 
10.40 am to 11 am
11 am to 12.45 pm
2 pm to 3.30 pm
3.30 pm to 4 pm
4 pm to 5.30 pm















