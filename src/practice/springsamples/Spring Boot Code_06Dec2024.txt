package com.mypack.abpractisedemo.abpractisedemo1;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

//@SpringBootApplication
@EnableAutoConfiguration
@RestController
public class Abpractisedemo1Application {
	
	private static List<Student> listOfStudents;
	
	static
	{
		listOfStudents = new ArrayList<Student>();
		Student s1 = new Student(11,"MDA", "Chennai");
		Student s2 = new Student(12, "MDB", "Vellore");
		Student s3 = new Student(13, "MDD", "Tiruttani");
		listOfStudents.add(s1);
		listOfStudents.add(s2);
		listOfStudents.add(s3);
		
	}

	public static void main(String[] args) {
		System.out.println(listOfStudents);
		SpringApplication.run(Abpractisedemo1Application.class, args);
	}
	
	
	@GetMapping("/")
	public String sayHi()
	{
		return "Hi from RestController!";
	}
	
	@GetMapping("/welcome")
	public String sayWelcome()
	{
		return "Welcome from RestController!";
	}
	
	@GetMapping("/json1")
	public GiveResult returnJson1()
	{
		return new GiveResult("Json object from RestController!");
	}
	
	@GetMapping("/json2")
	public GiveResponse returnJson2()
	{
		return new GiveResponse("Json object from RestController!", List.of("ABCD","SP","AIA"),new Person("MCCA"));
	}


	@GetMapping("/request1/v1/students")
	public List<Student> getStudents()
	{
		return listOfStudents;
	}
	
	
	@GetMapping("/request2/v1/students")
	public GetStudents getStudentsJson()
	{
		return new GetStudents(listOfStudents);
	}
	
	  @GetMapping("/student/{id}")
	    public Student findStudentById(@PathVariable int id) {
	        return listOfStudents.stream().filter(s->s.getId().equals(id))
	        		//.findFirst().get();
	        		.findFirst()
	        		.orElseThrow(
	        				()-> new IllegalArgumentException("Invalid Student Id!!"));

	        };
	 
	record GetStudents(List<Student> students) {}
	
	record GiveResult(String message) {}
	
	record Person (String name) {}
	
	record GiveResponse(String message, List<String> friends, Person person) {}
}


class Student
{
	private Integer id;
	private String name, address;
	
	public Student(Integer id, String name, String address) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
	}
	public Student() {}
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	@Override
	public int hashCode() {
		return Objects.hash(address, id, name);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Student other = (Student) obj;
		return Objects.equals(address, other.address) && Objects.equals(id, other.id)
				&& Objects.equals(name, other.name);
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", address=" + address + "]";
	}
	
	
}
